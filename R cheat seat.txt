R-Reference Sheet
-------------------------------------------------------------------------------------------


Variables
--------------------------------------------------------------------------------------------------------

1. 1:3              means 1,2,3


2.cos(c(90,180))



3.c(3, 4 - 1, 1 + 1 + 1) == 3    comparison


4.use == to compare objects and all.equal to compare numbers


5.x <- 4  or x =4
  is used in assigning variables


  or better still use assign("my_local_variable", 9 ^ 3 + 10 ^ 3)

  x<<- means global assignment.


6.Two statements on one line

 z<-rnorm(5) ; z

 assings 5 random numbers to z and displays z


7.Special Numbers 
 Inf     Infinity
 -Inf    negatibe Infinity
 NaN     Not a Number 
 NA      Not Available


8.is.finite(variable)  checks if a variable is a variabale.


Logical Operators
9.! not 
  & and 
  |  Or



10. any and all true or fals checker

none_true <- c(FALSE, FALSE, FALSE)
some_true <- c(FALSE, TRUE, FALSE)
all_true <- c(TRUE, TRUE, TRUE)

any(none_true)
## [1] FALSE
any(some_true)
## [1] TRUE
any(all_true)
## [1] TRUE
all(none_true)
## [1] FALSE
all(some_true)
## [1] FALSE
all(all_true)



Inspecting Variables and your workspace

11.class(variable Name) returns the class of a variable


lass(sqrt(1:10))
## [1] "numeric"
class(3 + 1i) #"i" creates imaginary components of complex numbers
## [1] "complex"
class(1) #although this is a whole number, it has class numeric
## [1] "numeric"
class(1L) #add a suffix of "L" to make the number an integer
## [1] "integer"
class(0.5:4.5) #the colon operator returns a value that is numeric...
## [1] "numeric"
class(1:5) #unless all its values are whole numbers
## [1] "integer"



12.class(girls)
  is a charecter class where girls <- (c("she","sells","seashells"))

13.  gender<-factor(c("she","sells","seashells")) 

   factor stores the charectors so that they could be rearranged in order
   it does this my assigning integers to them in alphebetical order..this can be confirmed
   by using as.integer(gender) viewing the content of gender in integer form.

14. levels(gender)  will arrange the contents of gender in alphetibetical oder

15.

gender_char <- sample(c("female", "male"), 10000, replace = TRUE)
gender_fac <- as.factor(gender_char)
object.size(gender_char)
## 80136 bytes
object.size(gender_fac)
## 40512 bytes



sample stores as charecters
but you can view as.factor

object.size of a factor returns the memory allocated to the object


16.you can view as.charecter too.

17.as.raw(1:17)
## [1] 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 10 11

as.raw displays content in binary hexadecimal form 

18.[1] "is.array" 			"is.atomic"
## [3] "is.call"			 "is.character"
## [5] "is.complex" 			"is.data.frame"
## [7] "is.double" 			"is.element"
## [9] "is.environment" 		"is.expression"
## [11] "is.factor"			 "is.finite"
 "is.function" 				"is.infinite"
## [15] "is.integer"			 "is.language"
## [17] "is.list" 			"is.loaded"
## [19] "is.logical" 			"is.matrix"
## [21] "is.na"				 "is.na.data.frame"
## [23] "is.na.numeric_version" 	"is.na.POSIXlt"
## [25] "is.na<-"			 "is.na<-.default"
## [27] "is.na<-.factor"		 "is.name"
## [29] "is.nan"			 "is.null"
## [31] "is.numeric"			 "is.numeric.Date"
## [33] "is.numeric.difftime" 			"is.numeric.POSIXt"
## [35] "is.numeric_version" 			"is.object"
## [37] "is.ordered" 			"is.package_version"
## [39] "is.pairlist" 			"is.primitive"
## [41] "is.qr" 			"is.R"
## [43] "is.raw"			 "is.recursive"
## [45] "is.single"			 "is.symbol"
## [47] "is.table"			 "is.unsorted"
## [49] "is.vector" 			"isatty"
## [51] "isBaseNamespace" 		"isdebugged"
## [53] "isIncomplete"			 "isNamespace"
## [55] "isOpen"			 "isRestart"
## [57] "isS4" 				"isSeekable"
## [59] "isSymmetric" 			"isSymmetric.matrix"
## [61] "isTRUE"


typical usage of such functions

if(!is(x, "some_class"))
{
 #
#some corrective measure
}



16.Type casting in R

x <- "123.456"
as(x, "numeric")


17.Enviroment


Printing inside an enviroment

ulams_spiral <- c(1, 8, 23, 46, 77) #See http://oeis.org/A033951
for(i in ulams_spiral) i                   #uh-oh, the values aren't printed
for(i in ulams_spiral) print(i)




18.runif generates random numbers between 0 and 1

runif(30) generates 30 random numbers


19.summary(num)

Returns summary information about the numbers contained in the variable num


20.set all.names=TRUE
and then use ls() to list all variables which have been created in your working space


VECTORS MATRICES AND ARRAYS                               
----------------------------------------------------------------------------------------------

21.seq.int(2,8)    

This creates a sequence of integer numbers like 2:8

for example 

n <- 0    #put 0 into n
1:0       # generate numbers from 1 t0 0
seq_len(n)    # supposed to generate n number of integers
***integer(0)      cannot start a sequence from less than 0 to 0, so outputs this.



Length

length(1:5)
## [1] 5
length(c(TRUE, FALSE, NA))
## [1] 3    



sn <- c("Sheena", "leads", "Sheila", "needs")
length(sn)
## [1] 4
nchar(sn)             #this prints out the number of charecters of each string in sn





Names
c(apple = 1, banana = 2, "kiwi fruit" = 3, 4)
## apple banana kiwi fruit
## 1 2 3 4

> x <- c("Ronaldo"=7,"Messi"=10,"Drogba"=11)
> x
Ronaldo   Messi  Drogba 
      7      10      11 
> names(x)
[1] "Ronaldo" "Messi"   "Drogba"



Indexing vectors/subsetting/subscripting/slicing 

> x<-(1:5)^2
> x
[1]  1  4  9 16 25
> x[c(1,3,5)]    or  x[c(-2,-4)]   or x[c(TRUE,FALSE,TRUE,FALSE,TRUE)]
[1]  1  9 25


> names(x)<- c("davis","els","doritta","ken","audrey")
> x[c("davis","els","doritta")]
  davis     els doritta 
      1       4       9 



Mixing positive and negative values is not allowed, and will throw an error:
x[c(1, -1)] #This doesn't make sense!



> which(x>10)                   #which values are greater than 10 in x
   ken audrey 
     4      5 



> which.min(x)                #which is the minimum value in x 
davis 
    1 


> which.max(x)                  #which is the maximum value in x
audrey 
     5 




VECTOR RECYCLING AND REPITION 

> x + 1
  davis     els doritta     ken  audrey 
      2       5      10      17      26 
> x
  davis     els doritta     ken  audrey 
      1       4       9      16      25 


> x + 1:10
 [1]  2  6 12 20 30  7 11 17 25 35



REP

rep(1:5, 3)
## [1] 1 2 3 4 5 1 2 3 4 5 1 2 3 4 5
rep(1:5, each = 3)
## [1] 1 1 1 2 2 2 3 3 3 4 4 4 5 5 5
rep(1:5, times = 1:5)
## [1] 1 2 2 3 3 3 4 4 4 4 5 5 5 5 5
rep(1:5, length.out = 7)
## [1] 1 2 3 4 5 1 2




CREATING ARRAYS AND MATRICES

Creationg of array

(
sample_array <- array(1:24),            #name array/content
dim  = c(4,3,2),                        #speciy dimension of the array
dimnames = list(                         #vertical column names
            c("one","two","three","four"), 
            c("ein","zwei","drei"),                   #horizontal row names
            c("un","deux"),                          

               )                       

)


, , un

      ein zwei drei
öne     1    5    9
two     2    6   10
three   3    7   11
four    4    8   12

, , deux

      ein zwei drei
öne    13   17   21
two    14   18   22
three  15   19   23
four   16   20   24





CREATING OF MATRIC

****
> (a_matrix <- matrix(
+     1:12,
+     nrow = 4, 
+     ncol = 3,
+     dimnames = list(
+         c("one", "two", "three", "four"),
+         c("ein", "zwei", "drei")
+     )
+ ))
      ein zwei drei
one     1    5    9
two     2    6   10
three   3    7   11
four    4    8   12



***

(two_d_array <- array(
 1:12,
 dim = c(4, 3),
 dimnames = list(
 c("one", "two", "three", "four"),
 c("ein", "zwei", "drei")
 )
))
## ein zwei drei
## one 1 5 9
## two 2 6 10
## three 3 7 11
## four 4 8 12
identical(two_d_array, a_matrix)
## [1] TRUE






***
matrix(
 1:12,
 nrow = 4,
 byrow = TRUE,
 dimnames = list(
 c("one", "two", "three", "four"),
 c("ein", "zwei", "drei")
 )
)
## ein zwei drei
## one 1 2 3
## two 4 5 6
## three 7 8 9
## four 10 11 12




Difference betweeen arrays and matrices is that in arrays you have 
to set the dim value but in matrix you have to set the nrow and crow
instead.





ROWS,COLUMNS AND DIMENSIONS











Lists and Data Frames. |
------------------------------------------------------------------------------------------------

